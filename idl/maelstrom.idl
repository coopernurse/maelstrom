
// maelstrom.idl: Interface definition for
// https://maelstromapp.com/

// Generic error codes:
//
// * 1001 - Invalid value (one or more fields has an invalid value)
// * 1002 - Already exists (uniqueness constraint violated)
// * 1003 - Not found (entity with provided ID was not found)
// * 1004 - Concurrent write violation (previous version of entity is not current)
//

interface MaelstromService {
    // PutComponent registers a component definition
    //
    // Error Codes:
    //
    // * 1001 - input.name is invalid
    // * 1004 - input.previousVersion does not match the version in the database
    //
    PutComponent(input PutComponentInput) PutComponentOutput

    // GetComponent returns a component with the given name
    //
    // Error Codes:
    //
    // * 1003 - No component found with that name
    //
    GetComponent(input GetComponentInput) GetComponentOutput

    // RemoveComponent deletes a component with the given name
    //
    // If no component is found with that name no error is raised
    // and the call silently no-ops.
    //
    // Error Codes:
    //
    // * 1001 - input.name is invalid
    //
    RemoveComponent(input RemoveComponentInput) RemoveComponentOutput

    // ListComponents returns a paginated list of components registered in the system
    // optionally filtered by name prefix.
    //
    // If no components exist in the system, ListComponentsOutput.components
    // will be an empty list.
    //
    // Results are sorted by name (ascending)
    //
    ListComponents(input ListComponentsInput) ListComponentsOutput


    // PutEventSource registers an event source definition associated
    // with a component
    //
    // Error Codes:
    //
    // * 1001 - input.name is invalid
    // * 1001 - input.componentName is invalid
    // * 1001 - No event source sub-type is provided
    // * 1001 - input.http is provided but has no hostname or pathPrefix
    // * 1003 - input.componentName does not reference a component defined in the system
    // * 1004 - input.previousVersion does not match the version in the database
    //
    PutEventSource(input PutEventSourceInput) PutEventSourceOutput

    // GetEventSource returns an event source with the given name
    //
    // Error Codes:
    //
    // * 1003 - No event source found with that name
    //
    GetEventSource(input GetEventSourceInput) GetEventSourceOutput

    // RemoveComponent deletes a component with the given name
    //
    // If no component is found with that name no error is raised
    // and the call silently no-ops.
    //
    // Error Codes:
    //
    // * 1001 - input.name is invalid
    //
    RemoveEventSource(input RemoveEventSourceInput) RemoveEventSourceOutput

    // ListEventSources returns a paginated list of event sources registered in the system
    // optionally filtered by name prefix, component name, or type.
    //
    // If no event sources exist in the system, ListEventSourcesOutput.eventSources
    // will be an empty list.
    //
    // Results are sorted by name (ascending)
    //
    ListEventSources(input ListEventSourcesInput) ListEventSourcesOutput
}

struct Component {
    // Name of the component (a-zA-Z0-9_-)+
    // Name max size is 60 characters
    // This value uniquely identifies the component in the system.
    name         string

    // Current version of the component
    // If the current version in the db does not match, a 1004 error is raised.
    // When creating a new component, set this to zero.
    version      int

    // Date component was last saved - may be omitted on put calls
    modifiedAt   int              [optional]

    docker       DockerComponent  [optional]
}

struct DockerComponent {
    image                   string
    httpPort                int
    httpHealthCheckPath     string

    // max seconds between container start and initial health check pass
    // if health check does not pass within this number of seconds, the container is stopped
    // if this value < 0 then no initial health check will be run at startup (default=60)
    httpStartHealthCheckSeconds  int     [optional]

    // interval to run health check (default=10)
    httpHealthCheckSeconds       int     [optional]

    // If component is not invoked within this duration then
    // the docker container is stopped and removed.  (default=300)
    idleTimeoutSeconds           int     [optional]

    // List of environment variables to set when starting container
    // Format:  NAME=VALUE
    // NOTE: values starting with MAELSTROM_ will be ignored, as this
    // prefix is reserved for maelstrom defined variables
    env                      []string       [optional]

    // List of filesystem mounts to bind to container
    // Use we care, as you must ensure these paths exist on any host in the maelstrom cluster
    volumes                  []VolumeMount  [optional]
}

struct VolumeMount {
    // See: https://godoc.org/github.com/docker/docker/api/types/mount#Type
    // default=bind
    type          string  [optional]

    // Path to mount point on host
    source        string

    // Path to mount inside container
    target        string

    // default=false
    readOnly      bool    [optional]
}

struct EventSource {
    // Name of the event source (a-zA-Z0-9_-)+
    // Name max size is 60 characters
    // This value uniquely identifies the event source in the system.
    name string

    // Name of the component the event source activates (a-zA-Z0-9_-)+
    // Name max size is 60 characters
    componentName string

    version      int
    modifiedAt   int

    // One and only one event source type may be provided
    http       HttpEventSource   [optional]
}

struct HttpEventSource {
    // at least one field (hostname, pathPrefix) must be provided
    // if more than one is provided, only requests matching all fields will match
    hostname      string    [optional]
    pathPrefix    string    [optional]
}

enum EventSourceType {
    http
}

struct RemoveComponentInput {
    // name of component to remove
    name    string
}

struct RemoveComponentOutput {
    name    string

    // if component was found in the system this is true, otherwise false
    found   bool
}

struct ListComponentsInput {
    // If specified only components matching this name prefix will be returned.
    namePrefix  string  [optional]

    // Max items to return per response (1..1000)
    // default=1000
    limit       int     [optional]

    // If set the next set of paginated results will be returned
    nextToken   string  [optional]
}

struct ListComponentsOutput {
    // Components in current page of output or an empty list if
    // no additional results exist
    components    []Component

    // If set there are additional results.
    // Client may make another ListComponents() request setting this
    // as ListComponentsInput.nextToken
    nextToken   string  [optional]
}

struct GetComponentInput {
    name       string
}

struct GetComponentOutput {
    component     Component
}

struct PutComponentInput {
    // Component to save, keyed off component.name
    // component.version should be set to zero when creating a new component
    component Component
}

struct PutComponentOutput {
    // Name of the component stored
    name string

    // New (current) version of the component
    // For a newly created component, this value will be 1.
    // The value will increment by one with each successful PutComponent() call.
    version int
}

struct PutEventSourceInput {
    // EventSource to save, keyed off eventSource.name
    eventSource     EventSource
}

struct PutEventSourceOutput {
    // Name of the event source stored
    name string

    // New (current) version of the event source
    // For a newly created event source, this value will be 1.
    // The value will increment by one with each successful PutEventSource() call.
    version int
}

struct GetEventSourceInput {
    name    string
}

struct GetEventSourceOutput {
    eventSource     EventSource
}

struct RemoveEventSourceInput {
    // name of event source to remove
    name    string
}

struct RemoveEventSourceOutput {
    name    string

    // if event source was found in the system this is true, otherwise false
    found   bool
}

struct ListEventSourcesInput {
    // If specified only event sources matching this name prefix will be returned.
    namePrefix       string            [optional]

    // If specified only event sources matching this component name will be returned
    componentName    string            [optional]

    // If specified only event sources matching this type will be returned
    eventSourceType  EventSourceType   [optional]

    // Max items to return per response (1..1000)
    // default=1000
    limit            int     [optional]

    // If set the next set of paginated results will be returned
    nextToken        string  [optional]
}

struct ListEventSourcesOutput {
    // Event sources in current page of output or an empty list if
    // no additional results exist
    eventSources    []EventSource

    // If set there are additional results.
    // Client may make another ListEventSources() request setting this
    // as ListEventSourcesInput.nextToken
    nextToken   string  [optional]
}
