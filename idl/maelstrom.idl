
// maelstrom.idl: Interface definition for
// https://maelstromapp.com/

// Generic error codes:
//
// * 1001 - Invalid value (one or more fields has an invalid value)
// * 1002 - Already exists (uniqueness constraint violated)
// * 1003 - Not found (entity with provided ID was not found)
// * 1004 - Concurrent write violation (previous version of entity is not current)
//

interface MaelstromService {
    // PutComponent registers a component definition
    //
    // Error Codes:
    //
    // * 1001 - input.name is invalid
    //
    PutComponent(input PutComponentInput) PutComponentOutput

    // GetComponent returns a component with the given name
    //
    // Error Codes:
    //
    // * 1003 - No component found with that name
    //
    GetComponent(input GetComponentInput) GetComponentOutput

    // RemoveComponent deletes a component with the given name
    //
    // If no component is found with that name no error is raised
    // and the call silently no-ops.
    //
    // Error Codes:
    //
    // * 1001 - input.name is invalid
    //
    RemoveComponent(input RemoveComponentInput) RemoveComponentOutput

    // ListComponents returns a paginated list of components registered in the system
    // optionally filtered by name prefix.
    //
    // If no components exist in the system, ListComponentsOutput.components
    // will be an empty list.
    //
    // Results are sorted by name (ascending)
    //
    ListComponents(input ListComponentsInput) ListComponentsOutput
}

struct Component {
    name         string
    version      int
    modifiedAt   int
    docker       DockerComponent  [optional]
}

struct DockerComponent {
    image      string
    httpPort   int
}

struct RemoveComponentInput {
    // name of component to remove
    name    string
}

struct RemoveComponentOutput {
    name    string

    // if component was found in the system this is true, otherwise false
    found   bool
}

struct ListComponentsInput {
    // If specified only components matching this name prefix will be returned.
    namePrefix  string  [optional]

    // Max components to return per response (1..1000)
    // default=1000
    limit       int     [optional]

    // If set the next set of paginated results will be returned
    nextToken   string  [optional]
}

struct ListComponentsOutput {
    // Components in current page of output or an empty list if
    // no additional results exist
    components    []Component

    // If set there are additional results.
    // Client may make another ListComponents() request setting this
    // as ListComponentsInput.nextToken
    nextToken   string  [optional]
}

struct GetComponentInput {
    name       string
}

struct GetComponentOutput {
    component     Component
}

struct PutComponentInput {
    // Name of the component (a-zA-Z0-9_-)+
    // Name max size is 60 characters
    // This value uniquely identifies the component in the system.
    name string

    // Old version of the component
    // If the current version in the db does not match, a 1004 error is raised.
    // When creating a new component, set this to zero.
    previousVersion int

    docker DockerComponent
}

struct PutComponentOutput {
    // Name of the component stored
    name string

    // New (current) version of the component
    // For a newly created component, this value will be 1.
    // The value will increment by one with each successful PutComponent() call.
    version int
}
